# -*- coding: utf-8 -*-
"""Matplotlib_Course.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lLtdeqjOnTzCn-8rSfWRenJbp6TITu_V

# Introduction to Matplotlib

Matplotlib is a Python library for data visualization (2D/3D-graphics, animation etc.). It provides publication-quality figures in many formats. We will explore matplotlib in interactive mode covering most common cases in this tutorial.

## Simple curve plot

### Loading Libraries
"""

# mandatory imports

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D  # for 3D plotting

# check version
matplotlib.__version__

"""pyplot provides a convenient interface to the matplotlib object-oriented plotting library. It is modeled closely after MATLAB. Therefore, the majority of plotting commands in pyplot have MATLAB analogs with similar arguments. Important commands are explained with interactive examples.

Let's now see a simple plotting and understand the ingredients that goes into customizing our plot as per our will and wish.

### Curve plot
"""

# get 10 linearly spaced points in the interval [0, 5)
x = np.linspace(0, 5, 10)
y = x ** 2

# create a figure/canvas of desired size
plt.figure(figsize=(8, 6))

# plot values; with a color `red`
plt.plot(x, y, 'r')

# give labels to the axes
plt.xlabel('x')
plt.ylabel('y')

# give a title to the plot
plt.title(r"Plot of $y=x^2$")
plt.show()

"""![plot1.png](attachment:ff48823b-dc74-475f-b77d-d91a8b28e966.png)

### Cosine & Sine Plot

Starting with default settings, we would like to draw a cosine and sine functions on the same plot. Then, we will make it look prettier by customizing the default settings.
"""

# 256 linearly spaced values between -pi and +pi
# both endpoints would be included; check (X[0], X[-1])
X = np.linspace(-np.pi, np.pi, 256, endpoint=True)

# compute cosine and sin values
C, S = np.cos(X), np.sin(X)

# plot both curves
plt.plot(X, C)
plt.plot(X, S)

# show the plot
plt.show()

"""![plot2.png](attachment:e0e110ee-20ad-4928-a8b6-7a2a1bbaab73.png)

The above plot doesn't seem too appealing. So, let's customizing the default settings a bit.

Matplotlib allows the aspect ratio, DPI and figure size to be specified when the Figure object is created, using the figsize and dpi keyword arguments. figsize is a tuple of the width and height of the figure in inches, and dpi is the dots-per-inch (pixel per inch). To create an 800x600 pixel, 100 dots-per-inch figure, we can do:
"""

# Create a new figure of size 800x600, using 100 dots per inch
plt.figure(figsize=(8, 6), dpi=100)

# Create a new subplot from a grid of 1x1
plt.subplot(111)

# Now, plot `cosine` using `blue` color with a continuous line of width 1 (pixel)
plt.plot(X, C, color="blue", linewidth=1.0, linestyle="-")

# And plot `sine` using `green` color with a continuous line of width 1 (pixel)
plt.plot(X, S, color="green", linewidth=1.0, linestyle="-")

# Set x limits to [-4, +4]
plt.xlim(-4.0, 4.0)

# Set y limits to [-1, +1]
plt.ylim(-1.0, 1.0)

# optionally, save the figure as a pdf using 72 dots per inch
plt.savefig("./sine_cosine.pdf", format='pdf', dpi=72)

# show grid
plt.grid(True)

# Show the plot on the screen
plt.show()

"""![plot3.png](attachment:c09405c4-4adb-4f15-b574-68fe0449898d.png)

### setting axes limits

Instead of hard-coding the xlim and ylim values, we can take these values from the array itself and then set the limits accordingly. We can also change the linewidth and color kwargs as per our wish.
"""

# set figure size and dpi (dots per inch)
plt.figure(figsize=(10, 6), dpi=80)

# Create a new subplot from a grid of 1x1
plt.subplot(111)

# customize color and line width
plt.plot(X, C, color="blue", linewidth=2.5, linestyle="-")
plt.plot(X, S, color="red",  linewidth=2.5, linestyle="-")

# set lower & upper bound by taking min & max value respectively
plt.xlim(X.min()*1.1, X.max()*1.1)
plt.ylim(C.min()*1.1, C.max()*1.1)

# optionally, save the figure as a pdf using 72 dots per inch
plt.savefig("./sine_cosine.pdf", format='pdf', dpi=80)

# show it on screen
plt.show()

"""![plot4.png](attachment:85ac065b-e544-4223-836e-8ac79c9f56b8.png)

### setting axes ticks
"""

# set figure size and dpi (dots per inch)
plt.figure(figsize=(10, 6), dpi=80)

# Create a new subplot from a grid of 1x1
plt.subplot(111)

# customize color and line width
plt.plot(X, C, color="blue", linewidth=2.5, linestyle="-")
plt.plot(X, S, color="red",  linewidth=2.5, linestyle="-")

# set lower & upper bound by taking min & max value respectively
plt.xlim(X.min()*1.1, X.max()*1.1)
plt.ylim(C.min()*1.1, C.max()*1.1)

# provide five tick values for x and 3 for y
plt.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi])
plt.yticks([-1, 0, +1])

# optionally, save the figure as a pdf using 72 dots per inch
plt.savefig("./sine_cosine.pdf", format='pdf', dpi=80)

# show it on screen
plt.show()

"""![plot5.png](attachment:0f8f0db4-ad51-4c1a-9966-a531461e532f.png)

### setting axes tick labels

We fixed the aexs ticks but their label is not very explicit. We could guess that 3.142 is π but it would be better to make it explicit. When we set tick values, we can also provide a corresponding label in the second argument list. Note that we'll use latex to allow for nice rendering of the label.
"""

# set figure size and dpi (dots per inch)
plt.figure(figsize=(10, 6), dpi=80)

# Create a new subplot from a grid of 1x1
plt.subplot(111)

# customize color and line width
plt.plot(X, C, color="blue", linewidth=2.5, linestyle="-")
plt.plot(X, S, color="red",  linewidth=2.5, linestyle="-")

# set lower & upper bound by taking min & max value respectively
plt.xlim(X.min()*1.1, X.max()*1.1)
plt.ylim(C.min()*1.1, C.max()*1.1)

# provide five tick values for x and 3 for y
# and pass the corresponding label as a second argument.
plt.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi],
           [r'$-\pi$', r'$-\pi/2$', r'$0$', r'$+\pi/2$', r'$+\pi$'])

plt.yticks([-1, 0, +1],
           [r'$-1$', r'$0$', r'$+1$'])

# optionally, save the figure as a pdf using 72 dots per inch
plt.savefig("./sine_cosine.pdf", format='pdf', dpi=80)

# show it on screen
plt.show()

"""![plot6.png](attachment:a980801f-4ba5-49f3-bba6-5a763eb53378.png)

### Adding legends
"""

# set figure size and dpi (dots per inch)
plt.figure(figsize=(10, 6), dpi=80)

# Create a new subplot from a grid of 1x1
plt.subplot(111)

# customize color and line width
# `label` is essential for `plt.legend` to work
plt.plot(X, C, color="blue", linewidth=2.5, linestyle="-", label="cosine")
plt.plot(X, S, color="red",  linewidth=2.5, linestyle="-", label="sine")

# set lower & upper bound by taking min & max value respectively
plt.xlim(X.min()*1.1, X.max()*1.1)
plt.ylim(C.min()*1.1, C.max()*1.1)

# provide five tick values for x and 3 for y
# and pass the corresponding label as a second argument.
plt.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi],
           [r'$-\pi$', r'$-\pi/2$', r'$0$', r'$+\pi/2$', r'$+\pi$'])

plt.yticks([-1, 0, +1],
           [r'$-1$', r'$0$', r'$+1$'])

# show legend on the upper left side of the axes
plt.legend(loc='upper left', frameon=False)

# optionally, save the figure as a pdf using 72 dots per inch
plt.savefig("./sine_cosine.pdf", format='pdf', dpi=80)

# show it on screen
plt.show()

"""![plot7.png](attachment:cb01a833-f171-45cb-90fb-5d8807e9eb48.png)

## Figure and Subplots

1. Figure : A figure is the windows in the GUI that has "Figure #" as title. Figures are numbered starting from 1 as opposed to the normal Python way starting from 0. There are several parameters that determine how the figure looks like.

2. Subplot : With subplot you can arrange plots in a regular grid. You need to specify the number of rows and columns and the number of the plot.

The following plot shows how to use the figure title, axis labels, and legends in a subplot:
"""

x = np.linspace(0, 5, 10)
y = x ** 2

fig, axes = plt.subplots(1, 2, figsize=(8,4), dpi=100)

# plot subplot 1
axes[0].plot(x, x**2, color="green", label="y = x**2")
axes[0].plot(x, x**3, color="red", label="y = x**3")
axes[0].legend(loc=2); # upper left corner
axes[0].set_xlabel('x')
axes[0].set_ylabel('y')
axes[0].set_title('Plot of y=x^2 and y=x^3')

# plot subplot 2
axes[1].plot(x, x**2, color="violet", label="y = x**2")
axes[1].plot(x, x**3, color="blue", label="y = x**3")
axes[1].legend(loc=2); # upper left corner
axes[1].set_xlabel('x')
axes[1].set_ylabel('y')
axes[1].set_title('Plot of y=x^2 and y=x^3')

# `fig.tight_layout()` automatically adjusts the positions of the axes on the figure canvas so that there is no overlapping content
# comment this out to see the difference
fig.tight_layout()

plt.show()

"""![plot8.png](attachment:4403c32f-dfad-4e57-8274-34d9ae5a67df.png)

## Formatting text: LaTeX, fontsize, font family

Matplotlib has great support for Latex. All we need to do is to use dollar signs encapsulate LaTeX in any text (legend, title, label, etc.). For example, "$y=x^3$".

But here we might run into a slightly subtle problem with Latex code and Python text strings. In Latex, we frequently use the backslash in commands, for example \alpha to produce the symbol α. But the backslash already has a meaning in Python strings (the escape code character). To avoid Python messing up our latex code, we need to use "raw" text strings. Raw text strings are prepended with an 'r', like r"\alpha" or r'\alpha' instead of "\alpha" or '\alpha':
"""

fig, ax = plt.subplots(figsize=(8,4), dpi=100)

ax.plot(x, x**2, label=r"$y = \alpha^2$")
ax.plot(x, x**3, label=r"$y = \alpha^3$")
ax.legend(loc=2) # upper left corner
ax.set_xlabel(r'$\alpha$', fontsize=18)
ax.set_ylabel(r'$y$', fontsize=18)
ax.set_title(r'Plot of y=$\alpha^{2}$ and y=$\alpha^{3}$')
plt.show()

"""![plot9.png](attachment:dc49e395-a745-46a4-9b41-3ddacee82ee1.png)

## Line and marker styles

To change the line width, we can use the linewidth or lw keyword argument. The line style can be selected using the linestyle or ls keyword arguments:
"""

fig, ax = plt.subplots(figsize=(12,6))

# possible marker symbols: marker = '+', 'o', '*', 's', ',', '.', '1', '2', '3', '4', ...
ax.plot(x, x+ 9, color="green", lw=2, ls='--', marker='+')
ax.plot(x, x+10, color="green", lw=2, ls='--', marker='o')
ax.plot(x, x+11, color="green", lw=2, ls='--', marker='s')
ax.plot(x, x+12, color="green", lw=2, ls='--', marker='1')

plt.show()

"""![plot10.png](attachment:61230609-9122-493e-bf93-6ab7280ac6bf.png)

## Logarithmic scale

It is also possible to set a logarithmic scale for one or both axes. This functionality is in fact only one application of a more general transformation system in Matplotlib. Each of the axes' scales are set seperately using set_xscale and set_yscale methods which accept one parameter (with the value "log" in this case):
"""

fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# plot normal scale
axes[0].plot(x, np.exp(x), color="red")
axes[0].plot(x, x**2, color="green")
axes[0].set_title("Normal scale")
axes[0].grid()  # show grid

# plot `log` scale
axes[1].plot(x, np.exp(x), color="blue")
axes[1].plot(x, x**2, color="violet")
axes[1].set_yscale("log")
axes[1].set_title("Logarithmic scale (y)")
axes[1].grid()  # show grid

fig.tight_layout()
plt.show()

"""![plot11.png](attachment:69889ba2-8dc5-40b0-89f7-3c2bc12a368b.png)

## Histogram plot
"""

n = np.random.randn(100000)
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# plot default histogram
axes[0].hist(n, color="blue")
axes[0].set_title("Default histogram")
axes[0].set_xlim((np.min(n), np.max(n)))

# plot cumulative histogram
axes[1].hist(n, cumulative=True, bins=50, color="green")
axes[1].set_title("Cumulative detailed histogram")
axes[1].set_xlim((np.min(n), np.max(n)))

fig.tight_layout()
plt.show()

"""![plot12.png](attachment:7d350f41-a116-4a8b-9321-6e2ec900a825.png)

## Common types of plots

### Scatter plot

A simple scatter plot of random values drawn from the standard Gaussian distribution.
"""

# set figure size and dpi (dots per inch)
plt.figure(figsize=(10, 6), dpi=80)

# Create a new subplot from a grid of 1x1
plt.subplot(111)

n = 1024
X = np.random.normal(0,1,n)
Y = np.random.normal(0,1,n)

# color is given by the angle between X & Y
T = np.arctan2(Y,X)

plt.axes([0.025, 0.025, 0.95, 0.95])

# The alpha blending value, between 0 (transparent) and 1 (opaque).
# s - marker size
# c - color
plt.scatter(X,Y, s=75, c=T, alpha=.5)

plt.xlim(-2.0, 2.0), plt.xticks([])
plt.ylim(-2.0, 2.0), plt.yticks([])
plt.show()

"""![plot13.png](attachment:98f35b35-d94b-46ec-b869-90b873c165ee.png)

### Contour plot

A contour plot represents a 3-dimensional surface by plotting constant z slices, called contours, on a 2-dimensional grid.
"""

# set figure size and dpi (dots per inch)
plt.figure(figsize=(10, 6), dpi=80)

# Create a new subplot from a grid of 1x1
plt.subplot(111)


def f(x,y):
    return (1-x/2+x**5+y**3)*np.exp(-x**2-y**2)

n = 256
x = np.linspace(-3, 3, n)
y = np.linspace(-3, 3, n)
X,Y = np.meshgrid(x, y)

plt.axes([0.025, 0.025, 0.95, 0.95])

plt.contourf(X, Y, f(X,Y), 8, alpha=.75, cmap=plt.cm.hot)
C = plt.contour(X, Y, f(X,Y), 8, colors='black')
plt.clabel(C, inline=1, fontsize=10)

plt.xticks([]), plt.yticks([])
plt.show()

"""![plot14.png](attachment:024a8ded-3543-475e-8018-ca412fa4c0e8.png)

### 3D plot

Represent a 3-dimensional surface. To use 3D graphics in matplotlib, we first need to create an axes instance of the class Axes3D. 3D axes can be added to a matplotlib figure canvas in exactly the same way as 2D axes, but a conventient way to create a 3D axis instance is to use the projection='3d' keyword argument to the add_axes or add_subplot functions.

Note: You can't rotate the plot in jupyter notebook. Plot it as a standalone module to zoom around and visualize it by rotating.
"""

# create figure and set figure size and dpi (dots per inch)
fig = plt.figure(figsize=(30, 12), dpi=80)
ax = fig.add_subplot(111, projection='3d')

# inputs
X = np.arange(-4, 4, 0.25)
Y = np.arange(-4, 4, 0.25)

X, Y = np.meshgrid(X, Y)

# 3D surface
R = np.sqrt(X**2 + Y**2)
Z = np.sin(R)

ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=plt.cm.hot)
ax.contourf(X, Y, Z, zdir='z', offset=-2, cmap=plt.cm.hot)

# set z axis limit
ax.set_zlim(-3, 3)

plt.show()

"""![plot15.png](attachment:bc9f9663-328a-402a-a9ca-d218e7414bd6.png)"""

### 3D Surface Plot

alpha = 0.7
phi_ext = 2 * np.pi * 0.5

def flux_qubit_potential(phi_m, phi_p):
    return 2 + alpha - 2 * np.cos(phi_p)*np.cos(phi_m) - alpha * np.cos(phi_ext - 2*phi_p)

phi_m = np.linspace(0, 2*np.pi, 100)
phi_p = np.linspace(0, 2*np.pi, 100)
X,Y = np.meshgrid(phi_p, phi_m)
Z = flux_qubit_potential(X, Y).T

fig = plt.figure(figsize=(25, 10))

# `ax` is a 3D-aware axis instance, because of the projection='3d' keyword argument to add_subplot
ax = fig.add_subplot(1, 2, 1, projection='3d')

p = ax.plot_surface(X, Y, Z, rstride=4, cstride=4, linewidth=0)

# surface_plot with color grading and color bar
ax = fig.add_subplot(1, 2, 2, projection='3d')
p = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=plt.cm.coolwarm, linewidth=0, antialiased=False)
cb = fig.colorbar(p, shrink=0.5)

plt.show()

"""![plot16.png](attachment:1ef3a9e4-91a6-47e0-9ea6-644c3fb0207c.png)

### 3D Wireframe Plot
"""

fig = plt.figure(figsize=(25, 10))

# `ax` is a 3D-aware axis instance, because of the projection='3d' keyword argument to add_subplot
ax = fig.add_subplot(1, 1, 1, projection='3d')

# create and plot a wireframe
p = ax.plot_wireframe(X, Y, Z, rstride=4, cstride=4)

plt.show()

"""![plot17.png](attachment:5845723e-2b57-4c89-b2fc-297b78955475.png)

### Coutour plots with axis level projections
"""

fig = plt.figure(figsize=(18, 8))

# `ax` is a 3D-aware axis instance, because of the projection='3d' keyword argument to add_subplot
ax = fig.add_subplot(1, 1, 1, projection='3d')

ax.plot_surface(X, Y, Z, rstride=4, cstride=4, alpha=0.25)
cset = ax.contour(X, Y, Z, zdir='z', offset=-np.pi, cmap=plt.cm.coolwarm)
cset = ax.contour(X, Y, Z, zdir='x', offset=-np.pi, cmap=plt.cm.coolwarm)
cset = ax.contour(X, Y, Z, zdir='y', offset=3*np.pi, cmap=plt.cm.coolwarm)

ax.set_xlim3d(-np.pi, 2*np.pi);
ax.set_ylim3d(0, 3*np.pi);
ax.set_zlim3d(-np.pi, 2*np.pi);

plt.show()

"""![plot18.png](attachment:5408099e-01f4-4490-9d22-1712d5364394.png)

### Changing viewing angle

We can change the perspective of a 3D plot using the view_init function, which takes two arguments: the elevation and the azimuth angles (unit degrees)
"""

fig = plt.figure(figsize=(8, 8))

# `ax` is a 3D-aware axis instance, because of the projection='3d' keyword argument to add_subplot
ax = fig.add_subplot(2, 1, 1, projection='3d')
ax.plot_wireframe(X, Y, Z, rstride=4, cstride=4, alpha=0.25)
ax.view_init(30, 45)

# `ax` is a 3D-aware axis instance, because of the projection='3d' keyword argument to add_subplot
ax = fig.add_subplot(2,1,2, projection='3d')
ax.plot_wireframe(X, Y, Z, rstride=4, cstride=4, alpha=0.25)
ax.view_init(70, 30)

fig.tight_layout()

"""![plot19.png](attachment:2a6d3833-7333-4167-a492-2345ff2d684a.png)

## Excercices

### Exercise 1: Simple Polynomial Plot

1. Plot a Polynomial Function:
   - Create an array `x` with 100 linearly spaced points between -10 and 10.
   - Create an array `y` for the polynomial function `y = 2x^3 - 5x^2 + 3x - 7`.
   - Plot `y` versus `x` with a blue line.
2. Customization:
   - Add labels to the x and y axes, and provide a title for the plot.
   - Change the figure size to 10x6 inches.
"""

import numpy as np
import matplotlib.pyplot as plt

# Create an array x with 100 linearly spaced points between -10 and 10
x = np.linspace(-10, 10, 100)

# Define the polynomial function y = 2x^3 - 5x^2 + 3x - 7
y = 2 * x**3 - 5 * x**2 + 3 * x - 7

# Plot y versus x with a blue line
plt.figure(figsize=(10, 6))
plt.plot(x, y, color='blue', label='y = 2x^3 - 5x^2 + 3x - 7')

# Customization: Add labels and title
plt.xlabel('x')
plt.ylabel('y')
plt.title('Plot of the Polynomial Function: y = 2x^3 - 5x^2 + 3x - 7')

# Show plot
plt.grid(True)
plt.legend()
plt.show()

"""### Exercise 2: Exponential and Logarithmic Plot

1. Plot Exponential and Logarithmic Functions:
   - Create an array `x` with 500 linearly spaced points between 0.1 and 10.
   - Compute `y1 = exp(x)` and `y2 = log(x)`.
   - Plot both functions on the same graph using different colors and line styles.
2. Customization:
   - Add a grid, labels for the axes, and a title.
   - Save the plot as a PNG file with 100 DPI resolution.
"""

x = np.linspace(0.1, 10, 500)
y1 = np.exp(x)
y2 = np.log(x)

# Create the plot
plt.figure(figsize=(10, 6))
plt.plot(x, y1, label='y = exp(x)', color='red', linestyle='--')
plt.plot(x, y2, label='y = log(x)', color='blue', linestyle='-')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Exponential and Logarithmic Functions')
plt.grid(True)
plt.legend()
plt.savefig('exponential_logarithmic_plot.png', dpi=100)

plt.show()

"""### Exercise 3: Figure and Subplots

1. Create Subplots with Different Functions:
   - Create a figure with two subplots in one row.
   - In the first subplot, plot `y = tan(x)` and `y = arctan(x)` for `x` ranging from -2π to 2π.
   - In the second subplot, plot `y = sinh(x)` and `y = cosh(x)` for `x` ranging from -2 to 2.
2. Customization:
   - Add labels to the axes, titles to the subplots, and legends.
   - Adjust the layout to avoid overlap.
"""

x1 = np.linspace(-2 * np.pi, 2 * np.pi, 500)
x2 = np.linspace(-2, 2, 500)
y1_tan = np.tan(x1)
y1_arctan = np.arctan(x1)
y2_sinh = np.sinh(x2)
y2_cosh = np.cosh(x2)
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.plot(x1, y1_tan, label='y = tan(x)', color='red', linestyle='--')
plt.plot(x1, y1_arctan, label='y = arctan(x)', color='blue', linestyle='-')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Tangent and Arctangent')
plt.legend()
plt.grid(True)

plt.subplot(1, 2, 2)
plt.plot(x2, y2_sinh, label='y = sinh(x)', color='green', linestyle='--')
plt.plot(x2, y2_cosh, label='y = cosh(x)', color='purple', linestyle='-')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Hyperbolic Sine and Cosine')
plt.legend()
plt.grid(True)

plt.tight_layout()

plt.show()

"""1. Plot a Histogram:
   - Generate an array `n` of 1000 values from a normal distribution.
   - Plot a histogram of these values with 30 bins.
2. Customization:
   - Change the color of the histogram and add a title.
   - Set the x-axis limit to cover the full range of `n`.
"""

n = np.random.randn(1000)
plt.figure(figsize=(10, 6))
plt.hist(n, bins=30, color='purple')

plt.title('Histogram of Normally Distributed Values')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.xlim(min(n), max(n))
plt.grid(True)
plt.show()

"""### Exercise 5: Scatter Plot

1. Plot a Scatter Plot with Mathematical Functions:
   - Create two arrays `x` and `y`, each with 500 values, where `x` is uniformly distributed and `y = sin(x) + random noise`.
   - Plot a scatter plot of `y` versus `x` with varying marker sizes and colors based on the values of `y`.
2. Customization:
   - Add a grid, hide the axis ticks, and save the plot as a PDF file.
"""

x = np.linspace(0, 10, 500)
noise = np.random.normal(0, 0.2, 500)
y = np.sin(x) + noise

plt.figure(figsize=(10, 6))
scatter = plt.scatter(x, y, c=y, s=50 * np.abs(y), cmap='viridis', alpha=0.7)

plt.grid(True)
plt.xticks([])
plt.yticks([])
plt.colorbar(scatter, label='y = sin(x) + noise')
plt.title('Scatter Plot of y = sin(x) + random noise')
plt.xlabel('x')
plt.ylabel('y')
plt.savefig('scatter_plot.pdf', format='pdf')


plt.show()

"""### Exercise 6: Contour Plot

1. Plot a Contour Plot of a Mathematical Function:
   - Create an array `x` of 200 points linearly spaced between -5 and 5, and a similar array `y`.
   - Create a 2D grid with `numpy.meshgrid` and define the function `f(x, y) = sin(sqrt(x^2 + y^2))`.
   - Plot a contour plot of this function.
2. Customization:
   - Add labels to the contours and use a different colormap.
"""

x = np.linspace(-5, 5, 200)
y = np.linspace(-5, 5, 200)

X, Y = np.meshgrid(x, y)
Z = np.sin(np.sqrt(X**2 + Y**2))
plt.figure(figsize=(8, 6))
contour = plt.contour(X, Y, Z, levels=20, cmap='plasma')

plt.clabel(contour, inline=True, fontsize=10)
plt.title('Contour Plot of $f(x, y) = \sin(\sqrt{x^2 + y^2})$')
plt.xlabel('x')
plt.ylabel('y')

plt.colorbar(contour, label='f(x, y)')
plt.show()

"""### Exercise 7: 3D Surface Plot

1. Plot a 3D Surface Plot of a Mathematical Function:
   - Create arrays `X` and `Y` with values ranging from -5 to 5 with a step of 0.25.
   - Compute `Z = cos(sqrt(X^2 + Y^2))`.
   - Plot a 3D surface plot of `Z`.
2. Customization:
   - Change the colormap and the viewing angle of the plot. Add a color bar.
"""

x = np.arange(-5, 5.25, 0.25)
y = np.arange(-5, 5.25, 0.25)
X, Y = np.meshgrid(x, y)
Z = np.cos(np.sqrt(X**2 + Y**2))

fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')
surface = ax.plot_surface(X, Y, Z, cmap='coolwarm', edgecolor='none')
fig.colorbar(surface, ax=ax, shrink=0.5, aspect=10)
ax.view_init(elev=30, azim=45)

ax.set_title('3D Surface Plot of $Z = \cos(\sqrt{X^2 + Y^2})$', fontsize=14)
ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
ax.set_zlabel('Z axis')

plt.show()

"""### Exercise 8: Line and Marker Styles

1. Plot Different Line and Marker Styles:
   - Create an array `x` of 10 linearly spaced points between -2 and 2.
   - Plot three different functions on the same graph using various colors, line styles, and markers: `y1 = x^2`, `y2 = x^3`, and `y3 = x^4`.
2. Customization:
   - Add axis labels and a title.
"""

x = np.linspace(-2, 2, 10)
y1 = x**2
y2 = x**3
y3 = x**4

plt.figure(figsize=(10, 6))
plt.plot(x, y1, 'ro--', label='y = x^2', markersize=8)
plt.plot(x, y2, 'bs:', label='y = x^3', markersize=8)
plt.plot(x, y3, 'g^-', label='y = x^4', markersize=8)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Plot of y = x^2, y = x^3, and y = x^4')
plt.legend()
plt.grid(True)
plt.show()

"""### Exercise 9: Logarithmic Scale

1. Plot Functions with Logarithmic Scale:
   - Create an array `x` of 50 points linearly spaced between 1 and 100.
   - Compute `y1 = 2^x` and `y2 = log2(x)`.
   - Plot both functions with logarithmic scales for the y-axis.
2. Customization:
   - Add a grid and set the figure size to 12x6 inches.
"""

x = np.linspace(1, 100, 50)
y1 = 2**x
y2 = np.log2(x)
plt.figure(figsize=(12, 6))

plt.plot(x, y1, label=r'$y = 2^x$', color='blue', linestyle='--')
plt.plot(x, y2, label=r'$y = \log_2(x)$', color='green', linestyle='-')
plt.yscale('log')
plt.xlabel('x')
plt.ylabel('y (log scale)')
plt.title('Plot of $y = 2^x$ and $y = \log_2(x)$ with Logarithmic Y-axis')
plt.grid(True)
plt.legend()
plt.show()

"""### Exercise 10: Changing Viewing Angle

1. Change the Viewing Angle of a 3D Plot:
   - Reuse the 3D surface plot from Exercise 7.
   - Create two subplots with different viewing angles using `view_init`.
2. Customization:
   - Add titles to each viewing angle.
"""

x = np.arange(-5, 5.25, 0.25)
y = np.arange(-5, 5.25, 0.25)
X, Y = np.meshgrid(x, y)
Z = np.cos(np.sqrt(X**2 + Y**2))

fig = plt.figure(figsize=(12, 6))

ax1 = fig.add_subplot(121, projection='3d')
surface1 = ax1.plot_surface(X, Y, Z, cmap='coolwarm', edgecolor='none')
ax1.view_init(elev=30, azim=45)
ax1.set_title('View Angle (30°, 45°)')
ax1.set_xlabel('X axis')
ax1.set_ylabel('Y axis')
ax1.set_zlabel('Z axis')

ax2 = fig.add_subplot(122, projection='3d')
surface2 = ax2.plot_surface(X, Y, Z, cmap='coolwarm', edgecolor='none')
ax2.view_init(elev=60, azim=30)
ax2.set_title('View Angle (60°, 30°)')
ax2.set_xlabel('X axis')
ax2.set_ylabel('Y axis')
ax2.set_zlabel('Z axis')

fig.colorbar(surface1, ax=[ax1, ax2], shrink=0.5, aspect=10)

plt.show()

"""### Exercise 11: 3D Wireframe Plot

1. Plot a 3D Wireframe Plot:
   - Create arrays `X` and `Y` with values ranging from -5 to 5 with a step of 0.25.
   - Compute `Z = sin(X) * cos(Y)`.
   - Plot a 3D wireframe plot of `Z`.
2. Customization:
   - Change the viewing angle and add a title to the plot.
"""

x = np.arange(-5, 5.25, 0.25)
y = np.arange(-5, 5.25, 0.25)
X, Y = np.meshgrid(x, y)

Z = np.sin(X) * np.cos(Y)
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')
wireframe = ax.plot_wireframe(X, Y, Z, color='blue', linewidth=0.8)

ax.view_init(elev=35, azim=60)

ax.set_title('3D Wireframe Plot of $Z = \sin(X) \cdot \cos(Y)$', fontsize=14)
ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
ax.set_zlabel('Z axis')

plt.show()

"""### Exercise 12: 3D Contour Plot

1. Plot a 3D Contour Plot:
   - Create arrays `X` and `Y` with values ranging from -5 to 5 with a step of 0.25.
   - Compute `Z = exp(-0.1 * (X^2 + Y^2))`.
   - Plot a 3D contour plot of `Z` using `contour3D`.
2. Customization:
   - Change the colormap and add labels to the axes.
"""

x = np.arange(-5, 5.25, 0.25)
y = np.arange(-5, 5.25, 0.25)
X, Y = np.meshgrid(x, y)

Z = np.exp(-0.1 * (X**2 + Y**2))
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')
contours = ax.contour3D(X, Y, Z, 50, cmap='viridis')
ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
ax.set_zlabel('Z axis')
ax.set_title('3D Contour Plot of $Z = e^{-0.1(X^2 + Y^2)}$', fontsize=14)

plt.show()

"""### Exercise 13: 3D Parametric Plot

1. Plot a 3D Parametric Plot:
   - Create an array `t` with 100 points linearly spaced between 0 and 2π.
   - Compute `X = sin(t)`, `Y = cos(t)`, and `Z = t`.
   - Plot a 3D parametric plot of `X`, `Y`, and `Z`.
2. Customization:
   - Add a title and labels to the axes. Change the color of the plot.
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

t = np.linspace(0, 2 * np.pi, 100)
X = np.sin(t)
Y = np.cos(t)
Z = t
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

ax.plot(X, Y, Z, color='red', linewidth=2)

ax.set_title('3D Parametric Plot of $X = \sin(t), Y = \cos(t), Z = t$', fontsize=14)
ax.set_xlabel('X = sin(t)')
ax.set_ylabel('Y = cos(t)')
ax.set_zlabel('Z = t')

plt.show()

"""### Exercise 14: 3D Bar Plot

1. Plot a 3D Bar Plot:
   - Create arrays `x` and `y` with 10 linearly spaced points between -5 and 5.
   - Compute `z = exp(-0.1 * (x^2 + y^2))`.
   - Plot a 3D bar plot of `z` values.
2. Customization:
   - Add a color bar and labels to the axes. Change the viewing angle.
"""

from mpl_toolkits.mplot3d import art3d
x = np.linspace(-5, 5, 10)
y = np.linspace(-5, 5, 10)

X, Y = np.meshgrid(x, y)
Z = np.exp(-0.1 * (X**2 + Y**2))
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')
x_flat = X.flatten()
y_flat = Y.flatten()
z_flat = np.zeros_like(x_flat)
dx = dy = 0.5
dz = Z.flatten()

colors = plt.cm.viridis(dz / dz.max())
ax.bar3d(x_flat, y_flat, z_flat, dx, dy, dz, color=colors, shade=True)

mappable = plt.cm.ScalarMappable(cmap='viridis')
mappable.set_array(dz)
fig.colorbar(mappable, ax=ax, shrink=0.5, aspect=10)

ax.set_title('3D Bar Plot of $Z = e^{-0.1(X^2 + Y^2)}$', fontsize=14)
ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
ax.set_zlabel('Z axis')

ax.view_init(elev=30, azim=60)

plt.show()

"""### Exercise 15: 3D Vector Field

1. Plot a 3D Vector Field:
   - Create arrays `X`, `Y`, and `Z` with values ranging from -5 to 5.
   - Compute `U = -Y`, `V = X`, and `W = Z`.
   - Plot a 3D vector field using `quiver3D`.
2. Customization:
   - Add a title and labels to the axes. Change the color and length of the vectors.
"""

x = np.linspace(-5, 5, 10)
y = np.linspace(-5, 5, 10)
z = np.linspace(-5, 5, 10)
X, Y, Z = np.meshgrid(x, y, z)

U = -Y
V = X
W = Z
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

quiver = ax.quiver(X, Y, Z, U, V, W, length=0.5, color='blue', normalize=True)

ax.set_title('3D Vector Field Plot', fontsize=14)
ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
ax.set_zlabel('Z axis')
ax.set_xlim([-5, 5])
ax.set_ylim([-5, 5])
ax.set_zlim([-5, 5])

plt.show()

"""### Exercise 16: 3D Scatter Plot

1. Plot a 3D Scatter Plot:
   - Create arrays `x`, `y`, and `z` each with 100 values drawn from a normal distribution.
   - Plot a 3D scatter plot of these points.
2. Customization:
   - Color the points based on their `z` values. Add a color bar.
"""

x = np.random.randn(100)
y = np.random.randn(100)
z = np.random.randn(100)

fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')
scatter = ax.scatter(x, y, z, c=z, cmap='viridis', marker='o')
color_bar = fig.colorbar(scatter, ax=ax, shrink=0.5, aspect=10)
color_bar.set_label('Z value')

ax.set_title('3D Scatter Plot Colored by Z Values', fontsize=14)
ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
ax.set_zlabel('Z axis')

plt.show()

"""### Exercise 17: 3D Line Plot

1. Plot a 3D Line Plot:
   - Create an array `t` with 100 points linearly spaced between 0 and 4π.
   - Compute `X = sin(t)`, `Y = cos(t)`, and `Z = t`.
   - Plot a 3D line plot of `X`, `Y`, and `Z`.
2. Customization:
   - Change the line color and width. Add labels to the axes.
"""

t = np.linspace(0, 4 * np.pi, 100)
X = np.sin(t)
Y = np.cos(t)
Z = t
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')
ax.plot(X, Y, Z, color='red', linewidth=2)

ax.set_title('3D Line Plot of Parametric Curve', fontsize=14)
ax.set_xlabel('X = sin(t)')
ax.set_ylabel('Y = cos(t)')
ax.set_zlabel('Z = t')

plt.show()

"""### Exercise 18: 3D Filled Contour Plot

1. Plot a 3D Filled Contour Plot:
   - Create arrays `X` and `Y` with values ranging from -5 to 5 with a step of 0.1.
   - Compute `Z = sin(sqrt(X^2 + Y^2))`.
   - Plot a 3D filled contour plot of `Z`.
2. Customization:
   - Add a color bar and labels to the axes. Change the colormap.
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
x = np.arange(-5, 5, 0.1)
y = np.arange(-5, 5, 0.1)
X, Y = np.meshgrid(x, y)
Z = np.sin(np.sqrt(X**2 + Y**2))
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')
contour = ax.contourf(X, Y, Z, 50, cmap='plasma')
color_bar = fig.colorbar(contour, ax=ax, shrink=0.5, aspect=10)
color_bar.set_label('Z value')

ax.set_title('3D Filled Contour Plot of $Z = \sin(\sqrt{X^2 + Y^2})$', fontsize=14)
ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
ax.set_zlabel('Z axis')
plt.show()

"""### Exercise 19: 3D Heatmap

1. Plot a 3D Heatmap:
   - Create arrays `x` and `y` with 50 points each ranging from -5 to 5.
   - Compute `Z = sin(sqrt(x^2 + y^2))`.
   - Plot a heatmap of `Z`.
2. Customization:
   - Add labels to the axes and a color bar.
"""

x = np.linspace(-5, 5, 50)
y = np.linspace(-5, 5, 50)
X, Y = np.meshgrid(x, y)

Z = np.sin(np.sqrt(X**2 + Y**2))
plt.figure(figsize=(10, 7))

heatmap = plt.imshow(Z, extent=(-5, 5, -5, 5), origin='lower', cmap='hot', aspect='auto')
color_bar = plt.colorbar(heatmap)
color_bar.set_label('Z value')

plt.title('3D Heatmap of $Z = \sin(\sqrt{x^2 + y^2})$', fontsize=14)
plt.xlabel('X axis')
plt.ylabel('Y axis')

plt.show()

"""### Exercise 20: 3D Density Plot

1. Plot a 3D Density Plot:
   - Generate 1000 random points in 3D space.
   - Create a density plot to show where points are concentrated.
2. Customization:
   - Add labels to the axes. Adjust the transparency of the plot.
"""

n_points = 1000
x = np.random.randn(n_points)
y = np.random.randn(n_points)
z = np.random.randn(n_points)

fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')
sc = ax.scatter(x, y, z, c=z, cmap='viridis', s=20, alpha=0.4)
color_bar = fig.colorbar(sc)
color_bar.set_label('Z value')
ax.set_title('3D Density Plot of Random Points', fontsize=14)
ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
ax.set_zlabel('Z axis')

plt.show()